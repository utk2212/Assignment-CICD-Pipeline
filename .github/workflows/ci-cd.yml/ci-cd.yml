name: CI/CD-Pipeline

# Trigger workflow on pull requests & pushes to main branch
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

# Define environment variables for AWS cloud & Kubernetes
env:
  AWS_REGION: us-east-1                   # AWS region resources are deployed
  ECR_REPO_NAME: node-app                 # ECR repo name
  CLUSTER_NAME: my-eks-cluster            # Name of EKS cluster
  DEPLOYMENT_NAME: node-app-deployment    # Kubernetes deployment name
  CONTAINER_PORT: 3000                    # Port exposed by container

jobs:
  test:
    name: Run test
    runs-on: ubuntu-latest                # latest Ubuntu runner
    steps:
      # 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2: Set up Node.js env
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16                # Node.js version

      # 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # 4: Run the tests to ensure code quality
      - name: Run tests
        run: npm test

  build_and_push:
    name: Build & push docker image to ECR
    runs-on: ubuntu-latest
    needs: test                           # Run job only after tests pass
    steps:
      # 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2: Log in to amazon ECR
      - name: Log in to amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 3: Build & push docker image to ECR
      - name: Build, Tag, and push Docker Image
        run: |
          # Define ECR image URI
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}"
          
          # Build Docker image
          docker build -t $IMAGE_URI:latest .
          
          # Tag image with the GitHub commit SHA for versioning
          docker tag $IMAGE_URI:latest $IMAGE_URI:${{ github.sha }}
          
          # Push image to ECR
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:${{ github.sha }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build_and_push                  # Run job only after Docker image is pushed
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Update Kubernetes deployment with new image
      - name: Update Kubernetes Deployment
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:latest"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} app=$IMAGE_URI --record

  notify:
    name: Send the Notifications
    runs-on: ubuntu-latest
    needs: deploy                          # Run job after deployment
    steps:
      # Notify if deployment succeeds
      - name: Send Deployment Success Notification
        if: success()
        run: echo "Deployment successful!"

      # Notify if deployment fails
      - name: Send Deployment Failure Notification
        if: failure()
        run: echo "Deployment failed!"
